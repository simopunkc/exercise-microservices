// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"sync"
)

// Ensure, that RepositoryUserMock does implement RepositoryUser.
// If this is not the case, regenerate this file with moq.
var _ RepositoryUser = &RepositoryUserMock{}

// RepositoryUserMock is a mock implementation of RepositoryUser.
//
// 	func TestSomethingThatUsesRepositoryUser(t *testing.T) {
//
// 		// make and configure a mocked RepositoryUser
// 		mockedRepositoryUser := &RepositoryUserMock{
// 			IsUserExistsFunc: func(ctx context.Context, userID int64) bool {
// 				panic("mock out the IsUserExists method")
// 			},
// 		}
//
// 		// use mockedRepositoryUser in code that requires RepositoryUser
// 		// and then make assertions.
//
// 	}
type RepositoryUserMock struct {
	// IsUserExistsFunc mocks the IsUserExists method.
	IsUserExistsFunc func(ctx context.Context, userID int64) bool

	// calls tracks calls to the methods.
	calls struct {
		// IsUserExists holds details about calls to the IsUserExists method.
		IsUserExists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
		}
	}
	lockIsUserExists sync.RWMutex
}

// IsUserExists calls IsUserExistsFunc.
func (mock *RepositoryUserMock) IsUserExists(ctx context.Context, userID int64) bool {
	if mock.IsUserExistsFunc == nil {
		panic("RepositoryUserMock.IsUserExistsFunc: method is nil but RepositoryUser.IsUserExists was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int64
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockIsUserExists.Lock()
	mock.calls.IsUserExists = append(mock.calls.IsUserExists, callInfo)
	mock.lockIsUserExists.Unlock()
	return mock.IsUserExistsFunc(ctx, userID)
}

// IsUserExistsCalls gets all the calls that were made to IsUserExists.
// Check the length with:
//     len(mockedRepositoryUser.IsUserExistsCalls())
func (mock *RepositoryUserMock) IsUserExistsCalls() []struct {
	Ctx    context.Context
	UserID int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
	}
	mock.lockIsUserExists.RLock()
	calls = mock.calls.IsUserExists
	mock.lockIsUserExists.RUnlock()
	return calls
}
