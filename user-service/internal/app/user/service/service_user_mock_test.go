// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"sync"
	"user-service/internal/app/domain"
)

// Ensure, that RepositoryUserMock does implement RepositoryUser.
// If this is not the case, regenerate this file with moq.
var _ RepositoryUser = &RepositoryUserMock{}

// RepositoryUserMock is a mock implementation of RepositoryUser.
//
// 	func TestSomethingThatUsesRepositoryUser(t *testing.T) {
//
// 		// make and configure a mocked RepositoryUser
// 		mockedRepositoryUser := &RepositoryUserMock{
// 			CreateFunc: func(ctx context.Context, user *domain.User) domain.Repository {
// 				panic("mock out the Create method")
// 			},
// 			GetByEmailFunc: func(ctx context.Context, email string) domain.Repository {
// 				panic("mock out the GetByEmail method")
// 			},
// 			GetByIDFunc: func(ctx context.Context, id int64) domain.Repository {
// 				panic("mock out the GetByID method")
// 			},
// 		}
//
// 		// use mockedRepositoryUser in code that requires RepositoryUser
// 		// and then make assertions.
//
// 	}
type RepositoryUserMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, user *domain.User) domain.Repository

	// GetByEmailFunc mocks the GetByEmail method.
	GetByEmailFunc func(ctx context.Context, email string) domain.Repository

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id int64) domain.Repository

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *domain.User
		}
		// GetByEmail holds details about calls to the GetByEmail method.
		GetByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
	}
	lockCreate     sync.RWMutex
	lockGetByEmail sync.RWMutex
	lockGetByID    sync.RWMutex
}

// Create calls CreateFunc.
func (mock *RepositoryUserMock) Create(ctx context.Context, user *domain.User) domain.Repository {
	if mock.CreateFunc == nil {
		panic("RepositoryUserMock.CreateFunc: method is nil but RepositoryUser.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *domain.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, user)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRepositoryUser.CreateCalls())
func (mock *RepositoryUserMock) CreateCalls() []struct {
	Ctx  context.Context
	User *domain.User
} {
	var calls []struct {
		Ctx  context.Context
		User *domain.User
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetByEmail calls GetByEmailFunc.
func (mock *RepositoryUserMock) GetByEmail(ctx context.Context, email string) domain.Repository {
	if mock.GetByEmailFunc == nil {
		panic("RepositoryUserMock.GetByEmailFunc: method is nil but RepositoryUser.GetByEmail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Email string
	}{
		Ctx:   ctx,
		Email: email,
	}
	mock.lockGetByEmail.Lock()
	mock.calls.GetByEmail = append(mock.calls.GetByEmail, callInfo)
	mock.lockGetByEmail.Unlock()
	return mock.GetByEmailFunc(ctx, email)
}

// GetByEmailCalls gets all the calls that were made to GetByEmail.
// Check the length with:
//     len(mockedRepositoryUser.GetByEmailCalls())
func (mock *RepositoryUserMock) GetByEmailCalls() []struct {
	Ctx   context.Context
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
	}
	mock.lockGetByEmail.RLock()
	calls = mock.calls.GetByEmail
	mock.lockGetByEmail.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *RepositoryUserMock) GetByID(ctx context.Context, id int64) domain.Repository {
	if mock.GetByIDFunc == nil {
		panic("RepositoryUserMock.GetByIDFunc: method is nil but RepositoryUser.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//     len(mockedRepositoryUser.GetByIDCalls())
func (mock *RepositoryUserMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Ensure, that UtilBcryptMock does implement UtilBcrypt.
// If this is not the case, regenerate this file with moq.
var _ UtilBcrypt = &UtilBcryptMock{}

// UtilBcryptMock is a mock implementation of UtilBcrypt.
//
// 	func TestSomethingThatUsesUtilBcrypt(t *testing.T) {
//
// 		// make and configure a mocked UtilBcrypt
// 		mockedUtilBcrypt := &UtilBcryptMock{
// 			CheckIfPasswordHashIsEqualFunc: func(repoPassword []byte, paramPassword []byte) error {
// 				panic("mock out the CheckIfPasswordHashIsEqual method")
// 			},
// 			GenerateHashFromPlainPasswordFunc: func(paramPassword []byte) (string, error) {
// 				panic("mock out the GenerateHashFromPlainPassword method")
// 			},
// 		}
//
// 		// use mockedUtilBcrypt in code that requires UtilBcrypt
// 		// and then make assertions.
//
// 	}
type UtilBcryptMock struct {
	// CheckIfPasswordHashIsEqualFunc mocks the CheckIfPasswordHashIsEqual method.
	CheckIfPasswordHashIsEqualFunc func(repoPassword []byte, paramPassword []byte) error

	// GenerateHashFromPlainPasswordFunc mocks the GenerateHashFromPlainPassword method.
	GenerateHashFromPlainPasswordFunc func(paramPassword []byte) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckIfPasswordHashIsEqual holds details about calls to the CheckIfPasswordHashIsEqual method.
		CheckIfPasswordHashIsEqual []struct {
			// RepoPassword is the repoPassword argument value.
			RepoPassword []byte
			// ParamPassword is the paramPassword argument value.
			ParamPassword []byte
		}
		// GenerateHashFromPlainPassword holds details about calls to the GenerateHashFromPlainPassword method.
		GenerateHashFromPlainPassword []struct {
			// ParamPassword is the paramPassword argument value.
			ParamPassword []byte
		}
	}
	lockCheckIfPasswordHashIsEqual    sync.RWMutex
	lockGenerateHashFromPlainPassword sync.RWMutex
}

// CheckIfPasswordHashIsEqual calls CheckIfPasswordHashIsEqualFunc.
func (mock *UtilBcryptMock) CheckIfPasswordHashIsEqual(repoPassword []byte, paramPassword []byte) error {
	if mock.CheckIfPasswordHashIsEqualFunc == nil {
		panic("UtilBcryptMock.CheckIfPasswordHashIsEqualFunc: method is nil but UtilBcrypt.CheckIfPasswordHashIsEqual was just called")
	}
	callInfo := struct {
		RepoPassword  []byte
		ParamPassword []byte
	}{
		RepoPassword:  repoPassword,
		ParamPassword: paramPassword,
	}
	mock.lockCheckIfPasswordHashIsEqual.Lock()
	mock.calls.CheckIfPasswordHashIsEqual = append(mock.calls.CheckIfPasswordHashIsEqual, callInfo)
	mock.lockCheckIfPasswordHashIsEqual.Unlock()
	return mock.CheckIfPasswordHashIsEqualFunc(repoPassword, paramPassword)
}

// CheckIfPasswordHashIsEqualCalls gets all the calls that were made to CheckIfPasswordHashIsEqual.
// Check the length with:
//     len(mockedUtilBcrypt.CheckIfPasswordHashIsEqualCalls())
func (mock *UtilBcryptMock) CheckIfPasswordHashIsEqualCalls() []struct {
	RepoPassword  []byte
	ParamPassword []byte
} {
	var calls []struct {
		RepoPassword  []byte
		ParamPassword []byte
	}
	mock.lockCheckIfPasswordHashIsEqual.RLock()
	calls = mock.calls.CheckIfPasswordHashIsEqual
	mock.lockCheckIfPasswordHashIsEqual.RUnlock()
	return calls
}

// GenerateHashFromPlainPassword calls GenerateHashFromPlainPasswordFunc.
func (mock *UtilBcryptMock) GenerateHashFromPlainPassword(paramPassword []byte) (string, error) {
	if mock.GenerateHashFromPlainPasswordFunc == nil {
		panic("UtilBcryptMock.GenerateHashFromPlainPasswordFunc: method is nil but UtilBcrypt.GenerateHashFromPlainPassword was just called")
	}
	callInfo := struct {
		ParamPassword []byte
	}{
		ParamPassword: paramPassword,
	}
	mock.lockGenerateHashFromPlainPassword.Lock()
	mock.calls.GenerateHashFromPlainPassword = append(mock.calls.GenerateHashFromPlainPassword, callInfo)
	mock.lockGenerateHashFromPlainPassword.Unlock()
	return mock.GenerateHashFromPlainPasswordFunc(paramPassword)
}

// GenerateHashFromPlainPasswordCalls gets all the calls that were made to GenerateHashFromPlainPassword.
// Check the length with:
//     len(mockedUtilBcrypt.GenerateHashFromPlainPasswordCalls())
func (mock *UtilBcryptMock) GenerateHashFromPlainPasswordCalls() []struct {
	ParamPassword []byte
} {
	var calls []struct {
		ParamPassword []byte
	}
	mock.lockGenerateHashFromPlainPassword.RLock()
	calls = mock.calls.GenerateHashFromPlainPassword
	mock.lockGenerateHashFromPlainPassword.RUnlock()
	return calls
}

// Ensure, that UtilJwtMock does implement UtilJwt.
// If this is not the case, regenerate this file with moq.
var _ UtilJwt = &UtilJwtMock{}

// UtilJwtMock is a mock implementation of UtilJwt.
//
// 	func TestSomethingThatUsesUtilJwt(t *testing.T) {
//
// 		// make and configure a mocked UtilJwt
// 		mockedUtilJwt := &UtilJwtMock{
// 			GenerateJWTFunc: func(userID int64) (string, error) {
// 				panic("mock out the GenerateJWT method")
// 			},
// 		}
//
// 		// use mockedUtilJwt in code that requires UtilJwt
// 		// and then make assertions.
//
// 	}
type UtilJwtMock struct {
	// GenerateJWTFunc mocks the GenerateJWT method.
	GenerateJWTFunc func(userID int64) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GenerateJWT holds details about calls to the GenerateJWT method.
		GenerateJWT []struct {
			// UserID is the userID argument value.
			UserID int64
		}
	}
	lockGenerateJWT sync.RWMutex
}

// GenerateJWT calls GenerateJWTFunc.
func (mock *UtilJwtMock) GenerateJWT(userID int64) (string, error) {
	if mock.GenerateJWTFunc == nil {
		panic("UtilJwtMock.GenerateJWTFunc: method is nil but UtilJwt.GenerateJWT was just called")
	}
	callInfo := struct {
		UserID int64
	}{
		UserID: userID,
	}
	mock.lockGenerateJWT.Lock()
	mock.calls.GenerateJWT = append(mock.calls.GenerateJWT, callInfo)
	mock.lockGenerateJWT.Unlock()
	return mock.GenerateJWTFunc(userID)
}

// GenerateJWTCalls gets all the calls that were made to GenerateJWT.
// Check the length with:
//     len(mockedUtilJwt.GenerateJWTCalls())
func (mock *UtilJwtMock) GenerateJWTCalls() []struct {
	UserID int64
} {
	var calls []struct {
		UserID int64
	}
	mock.lockGenerateJWT.RLock()
	calls = mock.calls.GenerateJWT
	mock.lockGenerateJWT.RUnlock()
	return calls
}
